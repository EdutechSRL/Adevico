'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace RefActionService
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="RefActionService.iActionService")>  _
    Public Interface iActionService
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/InsertLoginAction")>  _
        Sub InsertLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/InsertLoginAction")>  _
        Function BeginInsertLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndInsertLoginAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/UpdateLoginAction")>  _
        Sub UpdateLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/UpdateLoginAction")>  _
        Function BeginUpdateLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateLoginAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/InsertUserAction")>  _
        Sub InsertUserAction(ByVal oAction As lm.ActionDataContract.UserAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/InsertUserAction")>  _
        Function BeginInsertUserAction(ByVal oAction As lm.ActionDataContract.UserAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndInsertUserAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/InsertBrowserInfo")>  _
        Sub InsertBrowserInfo(ByVal oBrowser As lm.ActionDataContract.BrowserInfo)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/InsertBrowserInfo")>  _
        Function BeginInsertBrowserInfo(ByVal oBrowser As lm.ActionDataContract.BrowserInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndInsertBrowserInfo(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/UpdateModuleUsageTime")>  _
        Sub UpdateModuleUsageTime(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/UpdateModuleUsageTime")>  _
        Function BeginUpdateModuleUsageTime(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateModuleUsageTime(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/InsertCommunityAction")>  _
        Sub InsertCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/InsertCommunityAction")>  _
        Function BeginInsertCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndInsertCommunityAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/UpdateCommunityAction")>  _
        Sub UpdateCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/UpdateCommunityAction")>  _
        Function BeginUpdateCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateCommunityAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/InsertModuleAction")>  _
        Sub InsertModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/InsertModuleAction")>  _
        Function BeginInsertModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndInsertModuleAction(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/iActionService/UpdateModuleAction")>  _
        Sub UpdateModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/iActionService/UpdateModuleAction")>  _
        Function BeginUpdateModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateModuleAction(ByVal result As System.IAsyncResult)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface iActionServiceChannel
        Inherits RefActionService.iActionService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class iActionServiceClient
        Inherits System.ServiceModel.ClientBase(Of RefActionService.iActionService)
        Implements RefActionService.iActionService
        
        Private onBeginInsertLoginActionDelegate As BeginOperationDelegate
        
        Private onEndInsertLoginActionDelegate As EndOperationDelegate
        
        Private onInsertLoginActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateLoginActionDelegate As BeginOperationDelegate
        
        Private onEndUpdateLoginActionDelegate As EndOperationDelegate
        
        Private onUpdateLoginActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInsertUserActionDelegate As BeginOperationDelegate
        
        Private onEndInsertUserActionDelegate As EndOperationDelegate
        
        Private onInsertUserActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInsertBrowserInfoDelegate As BeginOperationDelegate
        
        Private onEndInsertBrowserInfoDelegate As EndOperationDelegate
        
        Private onInsertBrowserInfoCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateModuleUsageTimeDelegate As BeginOperationDelegate
        
        Private onEndUpdateModuleUsageTimeDelegate As EndOperationDelegate
        
        Private onUpdateModuleUsageTimeCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInsertCommunityActionDelegate As BeginOperationDelegate
        
        Private onEndInsertCommunityActionDelegate As EndOperationDelegate
        
        Private onInsertCommunityActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateCommunityActionDelegate As BeginOperationDelegate
        
        Private onEndUpdateCommunityActionDelegate As EndOperationDelegate
        
        Private onUpdateCommunityActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInsertModuleActionDelegate As BeginOperationDelegate
        
        Private onEndInsertModuleActionDelegate As EndOperationDelegate
        
        Private onInsertModuleActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateModuleActionDelegate As BeginOperationDelegate
        
        Private onEndUpdateModuleActionDelegate As EndOperationDelegate
        
        Private onUpdateModuleActionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Event InsertLoginActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event UpdateLoginActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event InsertUserActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event InsertBrowserInfoCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event UpdateModuleUsageTimeCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event InsertCommunityActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event UpdateCommunityActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event InsertModuleActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event UpdateModuleActionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Sub InsertLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction) Implements RefActionService.iActionService.InsertLoginAction
            MyBase.Channel.InsertLoginAction(oLoginAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInsertLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginInsertLoginAction
            Return MyBase.Channel.BeginInsertLoginAction(oLoginAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndInsertLoginAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndInsertLoginAction
            MyBase.Channel.EndInsertLoginAction(result)
        End Sub
        
        Private Function OnBeginInsertLoginAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oLoginAction As lm.ActionDataContract.LoginAction = CType(inValues(0),lm.ActionDataContract.LoginAction)
            Return Me.BeginInsertLoginAction(oLoginAction, callback, asyncState)
        End Function
        
        Private Function OnEndInsertLoginAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndInsertLoginAction(result)
            Return Nothing
        End Function
        
        Private Sub OnInsertLoginActionCompleted(ByVal state As Object)
            If (Not (Me.InsertLoginActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertLoginActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertLoginActionAsync(ByVal oLoginAction As lm.ActionDataContract.LoginAction)
            Me.InsertLoginActionAsync(oLoginAction, Nothing)
        End Sub
        
        Public Overloads Sub InsertLoginActionAsync(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal userState As Object)
            If (Me.onBeginInsertLoginActionDelegate Is Nothing) Then
                Me.onBeginInsertLoginActionDelegate = AddressOf Me.OnBeginInsertLoginAction
            End If
            If (Me.onEndInsertLoginActionDelegate Is Nothing) Then
                Me.onEndInsertLoginActionDelegate = AddressOf Me.OnEndInsertLoginAction
            End If
            If (Me.onInsertLoginActionCompletedDelegate Is Nothing) Then
                Me.onInsertLoginActionCompletedDelegate = AddressOf Me.OnInsertLoginActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertLoginActionDelegate, New Object() {oLoginAction}, Me.onEndInsertLoginActionDelegate, Me.onInsertLoginActionCompletedDelegate, userState)
        End Sub
        
        Public Sub UpdateLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction) Implements RefActionService.iActionService.UpdateLoginAction
            MyBase.Channel.UpdateLoginAction(oLoginAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateLoginAction(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginUpdateLoginAction
            Return MyBase.Channel.BeginUpdateLoginAction(oLoginAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndUpdateLoginAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndUpdateLoginAction
            MyBase.Channel.EndUpdateLoginAction(result)
        End Sub
        
        Private Function OnBeginUpdateLoginAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oLoginAction As lm.ActionDataContract.LoginAction = CType(inValues(0),lm.ActionDataContract.LoginAction)
            Return Me.BeginUpdateLoginAction(oLoginAction, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateLoginAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndUpdateLoginAction(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateLoginActionCompleted(ByVal state As Object)
            If (Not (Me.UpdateLoginActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateLoginActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateLoginActionAsync(ByVal oLoginAction As lm.ActionDataContract.LoginAction)
            Me.UpdateLoginActionAsync(oLoginAction, Nothing)
        End Sub
        
        Public Overloads Sub UpdateLoginActionAsync(ByVal oLoginAction As lm.ActionDataContract.LoginAction, ByVal userState As Object)
            If (Me.onBeginUpdateLoginActionDelegate Is Nothing) Then
                Me.onBeginUpdateLoginActionDelegate = AddressOf Me.OnBeginUpdateLoginAction
            End If
            If (Me.onEndUpdateLoginActionDelegate Is Nothing) Then
                Me.onEndUpdateLoginActionDelegate = AddressOf Me.OnEndUpdateLoginAction
            End If
            If (Me.onUpdateLoginActionCompletedDelegate Is Nothing) Then
                Me.onUpdateLoginActionCompletedDelegate = AddressOf Me.OnUpdateLoginActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateLoginActionDelegate, New Object() {oLoginAction}, Me.onEndUpdateLoginActionDelegate, Me.onUpdateLoginActionCompletedDelegate, userState)
        End Sub
        
        Public Sub InsertUserAction(ByVal oAction As lm.ActionDataContract.UserAction) Implements RefActionService.iActionService.InsertUserAction
            MyBase.Channel.InsertUserAction(oAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInsertUserAction(ByVal oAction As lm.ActionDataContract.UserAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginInsertUserAction
            Return MyBase.Channel.BeginInsertUserAction(oAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndInsertUserAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndInsertUserAction
            MyBase.Channel.EndInsertUserAction(result)
        End Sub
        
        Private Function OnBeginInsertUserAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oAction As lm.ActionDataContract.UserAction = CType(inValues(0),lm.ActionDataContract.UserAction)
            Return Me.BeginInsertUserAction(oAction, callback, asyncState)
        End Function
        
        Private Function OnEndInsertUserAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndInsertUserAction(result)
            Return Nothing
        End Function
        
        Private Sub OnInsertUserActionCompleted(ByVal state As Object)
            If (Not (Me.InsertUserActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertUserActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertUserActionAsync(ByVal oAction As lm.ActionDataContract.UserAction)
            Me.InsertUserActionAsync(oAction, Nothing)
        End Sub
        
        Public Overloads Sub InsertUserActionAsync(ByVal oAction As lm.ActionDataContract.UserAction, ByVal userState As Object)
            If (Me.onBeginInsertUserActionDelegate Is Nothing) Then
                Me.onBeginInsertUserActionDelegate = AddressOf Me.OnBeginInsertUserAction
            End If
            If (Me.onEndInsertUserActionDelegate Is Nothing) Then
                Me.onEndInsertUserActionDelegate = AddressOf Me.OnEndInsertUserAction
            End If
            If (Me.onInsertUserActionCompletedDelegate Is Nothing) Then
                Me.onInsertUserActionCompletedDelegate = AddressOf Me.OnInsertUserActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertUserActionDelegate, New Object() {oAction}, Me.onEndInsertUserActionDelegate, Me.onInsertUserActionCompletedDelegate, userState)
        End Sub
        
        Public Sub InsertBrowserInfo(ByVal oBrowser As lm.ActionDataContract.BrowserInfo) Implements RefActionService.iActionService.InsertBrowserInfo
            MyBase.Channel.InsertBrowserInfo(oBrowser)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInsertBrowserInfo(ByVal oBrowser As lm.ActionDataContract.BrowserInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginInsertBrowserInfo
            Return MyBase.Channel.BeginInsertBrowserInfo(oBrowser, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndInsertBrowserInfo(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndInsertBrowserInfo
            MyBase.Channel.EndInsertBrowserInfo(result)
        End Sub
        
        Private Function OnBeginInsertBrowserInfo(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oBrowser As lm.ActionDataContract.BrowserInfo = CType(inValues(0),lm.ActionDataContract.BrowserInfo)
            Return Me.BeginInsertBrowserInfo(oBrowser, callback, asyncState)
        End Function
        
        Private Function OnEndInsertBrowserInfo(ByVal result As System.IAsyncResult) As Object()
            Me.EndInsertBrowserInfo(result)
            Return Nothing
        End Function
        
        Private Sub OnInsertBrowserInfoCompleted(ByVal state As Object)
            If (Not (Me.InsertBrowserInfoCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertBrowserInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertBrowserInfoAsync(ByVal oBrowser As lm.ActionDataContract.BrowserInfo)
            Me.InsertBrowserInfoAsync(oBrowser, Nothing)
        End Sub
        
        Public Overloads Sub InsertBrowserInfoAsync(ByVal oBrowser As lm.ActionDataContract.BrowserInfo, ByVal userState As Object)
            If (Me.onBeginInsertBrowserInfoDelegate Is Nothing) Then
                Me.onBeginInsertBrowserInfoDelegate = AddressOf Me.OnBeginInsertBrowserInfo
            End If
            If (Me.onEndInsertBrowserInfoDelegate Is Nothing) Then
                Me.onEndInsertBrowserInfoDelegate = AddressOf Me.OnEndInsertBrowserInfo
            End If
            If (Me.onInsertBrowserInfoCompletedDelegate Is Nothing) Then
                Me.onInsertBrowserInfoCompletedDelegate = AddressOf Me.OnInsertBrowserInfoCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertBrowserInfoDelegate, New Object() {oBrowser}, Me.onEndInsertBrowserInfoDelegate, Me.onInsertBrowserInfoCompletedDelegate, userState)
        End Sub
        
        Public Sub UpdateModuleUsageTime(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime) Implements RefActionService.iActionService.UpdateModuleUsageTime
            MyBase.Channel.UpdateModuleUsageTime(oUsage)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateModuleUsageTime(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginUpdateModuleUsageTime
            Return MyBase.Channel.BeginUpdateModuleUsageTime(oUsage, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndUpdateModuleUsageTime(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndUpdateModuleUsageTime
            MyBase.Channel.EndUpdateModuleUsageTime(result)
        End Sub
        
        Private Function OnBeginUpdateModuleUsageTime(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oUsage As lm.ActionDataContract.ModuleUsageTime = CType(inValues(0),lm.ActionDataContract.ModuleUsageTime)
            Return Me.BeginUpdateModuleUsageTime(oUsage, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateModuleUsageTime(ByVal result As System.IAsyncResult) As Object()
            Me.EndUpdateModuleUsageTime(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateModuleUsageTimeCompleted(ByVal state As Object)
            If (Not (Me.UpdateModuleUsageTimeCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateModuleUsageTimeCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateModuleUsageTimeAsync(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime)
            Me.UpdateModuleUsageTimeAsync(oUsage, Nothing)
        End Sub
        
        Public Overloads Sub UpdateModuleUsageTimeAsync(ByVal oUsage As lm.ActionDataContract.ModuleUsageTime, ByVal userState As Object)
            If (Me.onBeginUpdateModuleUsageTimeDelegate Is Nothing) Then
                Me.onBeginUpdateModuleUsageTimeDelegate = AddressOf Me.OnBeginUpdateModuleUsageTime
            End If
            If (Me.onEndUpdateModuleUsageTimeDelegate Is Nothing) Then
                Me.onEndUpdateModuleUsageTimeDelegate = AddressOf Me.OnEndUpdateModuleUsageTime
            End If
            If (Me.onUpdateModuleUsageTimeCompletedDelegate Is Nothing) Then
                Me.onUpdateModuleUsageTimeCompletedDelegate = AddressOf Me.OnUpdateModuleUsageTimeCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateModuleUsageTimeDelegate, New Object() {oUsage}, Me.onEndUpdateModuleUsageTimeDelegate, Me.onUpdateModuleUsageTimeCompletedDelegate, userState)
        End Sub
        
        Public Sub InsertCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction) Implements RefActionService.iActionService.InsertCommunityAction
            MyBase.Channel.InsertCommunityAction(oAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInsertCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginInsertCommunityAction
            Return MyBase.Channel.BeginInsertCommunityAction(oAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndInsertCommunityAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndInsertCommunityAction
            MyBase.Channel.EndInsertCommunityAction(result)
        End Sub
        
        Private Function OnBeginInsertCommunityAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oAction As lm.ActionDataContract.CommunityAction = CType(inValues(0),lm.ActionDataContract.CommunityAction)
            Return Me.BeginInsertCommunityAction(oAction, callback, asyncState)
        End Function
        
        Private Function OnEndInsertCommunityAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndInsertCommunityAction(result)
            Return Nothing
        End Function
        
        Private Sub OnInsertCommunityActionCompleted(ByVal state As Object)
            If (Not (Me.InsertCommunityActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertCommunityActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertCommunityActionAsync(ByVal oAction As lm.ActionDataContract.CommunityAction)
            Me.InsertCommunityActionAsync(oAction, Nothing)
        End Sub
        
        Public Overloads Sub InsertCommunityActionAsync(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal userState As Object)
            If (Me.onBeginInsertCommunityActionDelegate Is Nothing) Then
                Me.onBeginInsertCommunityActionDelegate = AddressOf Me.OnBeginInsertCommunityAction
            End If
            If (Me.onEndInsertCommunityActionDelegate Is Nothing) Then
                Me.onEndInsertCommunityActionDelegate = AddressOf Me.OnEndInsertCommunityAction
            End If
            If (Me.onInsertCommunityActionCompletedDelegate Is Nothing) Then
                Me.onInsertCommunityActionCompletedDelegate = AddressOf Me.OnInsertCommunityActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertCommunityActionDelegate, New Object() {oAction}, Me.onEndInsertCommunityActionDelegate, Me.onInsertCommunityActionCompletedDelegate, userState)
        End Sub
        
        Public Sub UpdateCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction) Implements RefActionService.iActionService.UpdateCommunityAction
            MyBase.Channel.UpdateCommunityAction(oAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateCommunityAction(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginUpdateCommunityAction
            Return MyBase.Channel.BeginUpdateCommunityAction(oAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndUpdateCommunityAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndUpdateCommunityAction
            MyBase.Channel.EndUpdateCommunityAction(result)
        End Sub
        
        Private Function OnBeginUpdateCommunityAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oAction As lm.ActionDataContract.CommunityAction = CType(inValues(0),lm.ActionDataContract.CommunityAction)
            Return Me.BeginUpdateCommunityAction(oAction, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateCommunityAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndUpdateCommunityAction(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateCommunityActionCompleted(ByVal state As Object)
            If (Not (Me.UpdateCommunityActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateCommunityActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateCommunityActionAsync(ByVal oAction As lm.ActionDataContract.CommunityAction)
            Me.UpdateCommunityActionAsync(oAction, Nothing)
        End Sub
        
        Public Overloads Sub UpdateCommunityActionAsync(ByVal oAction As lm.ActionDataContract.CommunityAction, ByVal userState As Object)
            If (Me.onBeginUpdateCommunityActionDelegate Is Nothing) Then
                Me.onBeginUpdateCommunityActionDelegate = AddressOf Me.OnBeginUpdateCommunityAction
            End If
            If (Me.onEndUpdateCommunityActionDelegate Is Nothing) Then
                Me.onEndUpdateCommunityActionDelegate = AddressOf Me.OnEndUpdateCommunityAction
            End If
            If (Me.onUpdateCommunityActionCompletedDelegate Is Nothing) Then
                Me.onUpdateCommunityActionCompletedDelegate = AddressOf Me.OnUpdateCommunityActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateCommunityActionDelegate, New Object() {oAction}, Me.onEndUpdateCommunityActionDelegate, Me.onUpdateCommunityActionCompletedDelegate, userState)
        End Sub
        
        Public Sub InsertModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction) Implements RefActionService.iActionService.InsertModuleAction
            MyBase.Channel.InsertModuleAction(oAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInsertModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginInsertModuleAction
            Return MyBase.Channel.BeginInsertModuleAction(oAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndInsertModuleAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndInsertModuleAction
            MyBase.Channel.EndInsertModuleAction(result)
        End Sub
        
        Private Function OnBeginInsertModuleAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oAction As lm.ActionDataContract.ModuleAction = CType(inValues(0),lm.ActionDataContract.ModuleAction)
            Return Me.BeginInsertModuleAction(oAction, callback, asyncState)
        End Function
        
        Private Function OnEndInsertModuleAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndInsertModuleAction(result)
            Return Nothing
        End Function
        
        Private Sub OnInsertModuleActionCompleted(ByVal state As Object)
            If (Not (Me.InsertModuleActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertModuleActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertModuleActionAsync(ByVal oAction As lm.ActionDataContract.ModuleAction)
            Me.InsertModuleActionAsync(oAction, Nothing)
        End Sub
        
        Public Overloads Sub InsertModuleActionAsync(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal userState As Object)
            If (Me.onBeginInsertModuleActionDelegate Is Nothing) Then
                Me.onBeginInsertModuleActionDelegate = AddressOf Me.OnBeginInsertModuleAction
            End If
            If (Me.onEndInsertModuleActionDelegate Is Nothing) Then
                Me.onEndInsertModuleActionDelegate = AddressOf Me.OnEndInsertModuleAction
            End If
            If (Me.onInsertModuleActionCompletedDelegate Is Nothing) Then
                Me.onInsertModuleActionCompletedDelegate = AddressOf Me.OnInsertModuleActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertModuleActionDelegate, New Object() {oAction}, Me.onEndInsertModuleActionDelegate, Me.onInsertModuleActionCompletedDelegate, userState)
        End Sub
        
        Public Sub UpdateModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction) Implements RefActionService.iActionService.UpdateModuleAction
            MyBase.Channel.UpdateModuleAction(oAction)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateModuleAction(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RefActionService.iActionService.BeginUpdateModuleAction
            Return MyBase.Channel.BeginUpdateModuleAction(oAction, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndUpdateModuleAction(ByVal result As System.IAsyncResult) Implements RefActionService.iActionService.EndUpdateModuleAction
            MyBase.Channel.EndUpdateModuleAction(result)
        End Sub
        
        Private Function OnBeginUpdateModuleAction(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim oAction As lm.ActionDataContract.ModuleAction = CType(inValues(0),lm.ActionDataContract.ModuleAction)
            Return Me.BeginUpdateModuleAction(oAction, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateModuleAction(ByVal result As System.IAsyncResult) As Object()
            Me.EndUpdateModuleAction(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateModuleActionCompleted(ByVal state As Object)
            If (Not (Me.UpdateModuleActionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateModuleActionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateModuleActionAsync(ByVal oAction As lm.ActionDataContract.ModuleAction)
            Me.UpdateModuleActionAsync(oAction, Nothing)
        End Sub
        
        Public Overloads Sub UpdateModuleActionAsync(ByVal oAction As lm.ActionDataContract.ModuleAction, ByVal userState As Object)
            If (Me.onBeginUpdateModuleActionDelegate Is Nothing) Then
                Me.onBeginUpdateModuleActionDelegate = AddressOf Me.OnBeginUpdateModuleAction
            End If
            If (Me.onEndUpdateModuleActionDelegate Is Nothing) Then
                Me.onEndUpdateModuleActionDelegate = AddressOf Me.OnEndUpdateModuleAction
            End If
            If (Me.onUpdateModuleActionCompletedDelegate Is Nothing) Then
                Me.onUpdateModuleActionCompletedDelegate = AddressOf Me.OnUpdateModuleActionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateModuleActionDelegate, New Object() {oAction}, Me.onEndUpdateModuleActionDelegate, Me.onUpdateModuleActionCompletedDelegate, userState)
        End Sub
    End Class
End Namespace
